import faker from "faker";
import graphqlRequest from "../../../testing/request";
import RegisterInput from "../input/RegisterInput";
import User from "../../../entities/User";
import runTest from "../../../testing/TestFramework";

// Register Test Mutation
const registerMutation: string = `
mutation Register($data: RegisterInput!) {
    register(data: $data) {
        id
        username
        email
        imageURL
    }
}
`;

// Register Test
const registerTest = (action: string) => {
  describe("Register", () => {
    it("Create User", async () => {
      // Register Test User
      const registerUser: RegisterInput = {
        username: (
          faker.name.firstName() + faker.name.lastName()
        ).toLowerCase(),
        email: faker.internet.email(),
        password: faker.internet.password()
      };

      // Register Test Variables
      const registerVariables: { [k: string]: RegisterInput } = {
        data: registerUser
      };

      // Completes GraphQL Request
      const response: any = await graphqlRequest({
        source: action,
        variableValues: registerVariables
      });

      // Verifies if Username and Email match
      expect(response).toMatchObject({
        data: {
          register: {
            username: registerUser.username,
            email: registerUser.email
          }
        }
      });

      // Verifies if Database Entry Worked
      const dbUser = await User.findOne({
        where: { email: registerUser.email }
      });
      expect(dbUser).toBeDefined();
      expect(dbUser!.confirmed).toBeFalsy();
      expect(dbUser!.username).toBe(registerUser.username);
    });
  });
};

runTest(() => registerTest(registerMutation));